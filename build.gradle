plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.4.4"
    id("io.micronaut.aot") version "4.4.4"
     id("org.graalvm.buildtools.native") version "0.10.1"
}

version = "0.1"
group = "example.micronaut"

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("io.micronaut:micronaut-graal")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut.reactor:micronaut-reactor")
    compileOnly("org.projectlombok:lombok")
    compileOnly("io.micronaut:micronaut-http-client")
    runtimeOnly("ch.qos.logback:logback-classic")
    testImplementation("io.micronaut:micronaut-http-client")
}


application {
    mainClass = "example.micronaut.Application"
    applicationDefaultJvmArgs = [
        '--add-modules', 'jdk.incubator.vector'
    ]
}

java {
    sourceCompatibility = JavaVersion.toVersion("23")
    targetCompatibility = JavaVersion.toVersion("23")
}

tasks.withType(JavaCompile) {
    options.compilerArgs += [
        '--add-modules', 'jdk.incubator.vector'
    ]
}

tasks.withType(JavaExec) {
    jvmArgs += [
        '--add-modules', 'jdk.incubator.vector',
        '-XX:+AlignVector',
        '-XX:+UseCompressedOops',
        '-XX:ParallelGCThreads=8',
        '-XX:ConcGCThreads=4',
        '-XX:+UseZGC',
        '-Xmx4g',
        '-Xms4g'
    ]
}

graalvmNative {
    toolchainDetection = true
    binaries {
        main {
            imageName = "application" 
            mainClass = "example.micronaut.Application"
            buildArgs.addAll([
                '--enable-preview', 
                '--add-modules=jdk.incubator.vector',
		        '-O3',
                '-march=x86-64',
                '--enable-monitoring=heapdump,jfr',
                '-H:+ForeignAPISupport',
                '-H:+UnlockExperimentalVMOptions',
                '-H:+ReportExceptionStackTraces', 
                '-H:+AddAllCharsets'
            ])
            jvmArgs.addAll([
                '-XX:+AlignVector'
            ])
        }
    }
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("example.micronaut.*")
    }
    aot {
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true    
    }
}

tasks.named("dockerfileNative") {
    jdkVersion = "23"
}